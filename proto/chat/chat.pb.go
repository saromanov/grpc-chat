// Code generated by protoc-gen-go.
// source: chat.proto
// DO NOT EDIT!

/*
Package chat is a generated protocol buffer package.

It is generated from these files:
	chat.proto

It has these top-level messages:
	Message
	MessageResponse
	SearchMessagesRequest
	MessagesResponse
*/
package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Message struct {
	Body      string `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
	User      string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MessageResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *MessageResponse) Reset()                    { *m = MessageResponse{} }
func (m *MessageResponse) String() string            { return proto.CompactTextString(m) }
func (*MessageResponse) ProtoMessage()               {}
func (*MessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SearchMessagesRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *SearchMessagesRequest) Reset()                    { *m = SearchMessagesRequest{} }
func (m *SearchMessagesRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchMessagesRequest) ProtoMessage()               {}
func (*SearchMessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type MessagesResponse struct {
}

func (m *MessagesResponse) Reset()                    { *m = MessagesResponse{} }
func (m *MessagesResponse) String() string            { return proto.CompactTextString(m) }
func (*MessagesResponse) ProtoMessage()               {}
func (*MessagesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Message)(nil), "chat.Message")
	proto.RegisterType((*MessageResponse)(nil), "chat.MessageResponse")
	proto.RegisterType((*SearchMessagesRequest)(nil), "chat.SearchMessagesRequest")
	proto.RegisterType((*MessagesResponse)(nil), "chat.MessagesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Chat service

type ChatClient interface {
	AddMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResponse, error)
	SearchMessages(ctx context.Context, in *SearchMessagesRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) AddMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := grpc.Invoke(ctx, "/chat.Chat/AddMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchMessages(ctx context.Context, in *SearchMessagesRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := grpc.Invoke(ctx, "/chat.Chat/SearchMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatServer interface {
	AddMessage(context.Context, *Message) (*MessageResponse, error)
	SearchMessages(context.Context, *SearchMessagesRequest) (*MessagesResponse, error)
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_AddMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AddMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/AddMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AddMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/SearchMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchMessages(ctx, req.(*SearchMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMessage",
			Handler:    _Chat_AddMessage_Handler,
		},
		{
			MethodName: "SearchMessages",
			Handler:    _Chat_SearchMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xce, 0x48, 0x2c,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0xfc, 0xb9, 0xd8, 0x7d, 0x53,
	0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x85, 0x84, 0xb8, 0x58, 0x92, 0xf2, 0x53, 0x2a, 0x25, 0x18, 0x15,
	0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x90, 0x58, 0x69, 0x71, 0x6a, 0x91, 0x04, 0x13, 0x44, 0x0c,
	0xc4, 0x16, 0x92, 0xe1, 0xe2, 0x2c, 0xc9, 0xcc, 0x4d, 0x2d, 0x2e, 0x49, 0xcc, 0x2d, 0x90, 0x60,
	0x06, 0x4a, 0x30, 0x07, 0x21, 0x04, 0x94, 0x14, 0xb9, 0xf8, 0xa1, 0x06, 0x06, 0xa5, 0x16, 0x17,
	0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x40, 0x8d, 0x05, 0xb2, 0x94, 0xb4,
	0xb9, 0x44, 0x83, 0x53, 0x13, 0x8b, 0x92, 0x33, 0xa0, 0x0a, 0x8b, 0x83, 0x52, 0x0b, 0x4b, 0x81,
	0xda, 0xe1, 0xb6, 0x31, 0x22, 0x6c, 0x53, 0x12, 0xe2, 0x12, 0x40, 0x28, 0x83, 0x18, 0x68, 0xd4,
	0xc8, 0xc8, 0xc5, 0xe2, 0x0c, 0x74, 0xbd, 0x90, 0x11, 0x17, 0x97, 0x63, 0x4a, 0x0a, 0xcc, 0x03,
	0xbc, 0x7a, 0x60, 0xef, 0x41, 0xb9, 0x52, 0xa2, 0x28, 0x5c, 0xb8, 0x6b, 0x5c, 0xb9, 0xf8, 0x50,
	0x6d, 0x17, 0x92, 0x86, 0x28, 0xc4, 0xea, 0x26, 0x29, 0x31, 0x14, 0x53, 0xe0, 0x6e, 0x48, 0x62,
	0x03, 0x87, 0xa2, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x08, 0xb5, 0x94, 0x7a, 0x53, 0x01, 0x00,
	0x00,
}
